@use '../variables' as *;
@use "buttons' as *;
@use "forms' as *;
@use "labels' as *;

@mixin buttonbar-horizontal() {
	flex-direction: row;
	gap: $buttonbar-gap;

	.cui-buttonbar-group {
		.cui-button,
		.cui-select {
			&:not(:last-child, .cui-last-visible-child) .cui-button-visual {
				border-right: 0 !important;
			}

			&:first-child:not(:only-child) .cui-button-visual {
				border-top-right-radius: 0;
				border-bottom-right-radius: 0;
			}

			&:last-child:not(:only-child) .cui-button-visual {
				border-top-left-radius: 0;
				border-bottom-left-radius: 0;
			}

			&:not(:first-child, :last-child) .cui-button-visual {
				border-radius: 0;
			}
		}

		.cui-button-hidden + .cui-button,
		.cui-button-hidden + .cui-select {
			&:last-child:not(:only-child) .cui-button-visual {
				border-top-left-radius: $btn-border-radius;
				border-bottom-left-radius: $btn-border-radius;
			}
		}
	}
}

@mixin buttonbar-vertical() {
	flex-direction: column;
	align-items: flex-start;
	justify-content: center;
	gap: $buttonbar-gap;

	.cui-buttonbar-group {
		display: flex;
		flex-direction: column;
		align-items: flex-start;
		justify-content: center;

		.cui-button,
		.cui-select {
			.cui-button-visual {
				border-right: $btn-border-width solid $btn-border-color !important; // need to override the 0 reset from the default buttonbar-horizontal()
			}

			&:not(:last-child) .cui-button-visual {
				border-bottom: 0 !important;
			}

			&:first-child:not(:only-child) .cui-button-visual {
				border-bottom-left-radius: 0;
				border-bottom-right-radius: 0;
				border-top-left-radius: $btn-border-radius;
				border-top-right-radius: $btn-border-radius;
			}

			&:last-child:not(:only-child) .cui-button-visual {
				border-top-left-radius: 0;
				border-top-right-radius: 0;
				border-bottom-left-radius: $btn-border-radius;
				border-bottom-right-radius: $btn-border-radius;
			}

			&:not(:first-child, :last-child) .cui-button-visual {
				border-radius: 0;
			}
		}
	}
}

// use only for buttonbars that contain plain buttons (not bordered buttons)
// tight = no gap between buttons
@mixin buttonbar-horizontal-tight() {
	gap: 0; // reset default gap

	.cui-button {
		~ .cui-buttonbar-group {
			margin: 0 $buttonbar-gap;
		}
	}
}

@mixin buttonbar-vertical-tight() {
	gap: 0; // reset default gap

	.cui-button {
		~ .cui-buttonbar-group {
			margin: $buttonbar-gap 0;
		}
	}
}

@mixin buttonbar-group-navigation($border: 0) {	
	// use separate border to cirumvent border styles on hover for the inverted buttons	
	@include ungroup-visually();

	border-radius: $btn-border-radius;
	overflow: hidden;

	@if $border == 1 {
		--border-color: #{$btn-border-color};

		position: relative;

		&::after {
			content: '';
			position: absolute;
			display: block;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			pointer-events: none;
			border-radius: $btn-border-radius;
			border: 1px solid var(--border-color);
		}
	}

	.cui-button .cui-button-visual {
		min-width: 24px;
	}

	.cui-number-input {
		margin: 0 $spacer-xs;
	}
}

@mixin buttonbar-group-navigation-sm() {
	.cui-button-button {
		@include button-sm();
	}

	.cui-label {
		@include label-sm();

		line-height: 1;
		padding: 0;
	}

	.cui-number-input input {
		@include input-sm();
	}
}

// special: make navigation bar tighter so it will be fully visible on very small/narrow thumbnails in the search results
// or in the asset browser
@mixin buttonbar-group-navigation-tight() {
	.cui-label .cui-label-content {
		width: auto;
	}

	.cui-button-button .cui-button-visual {
		min-width: var(--buttonbar-group-navigation-tight-min-width, 22px);
	}
}

@mixin buttonbar-group-navigation-inverted($border: 0) {
	@include buttonbar-group-navigation($border);

	// add background to buttonbar-group !
	background-color: $btn-inverted-background;

	// must override @include button-bordered() in the buttonbar-horizontal() mixin that is applied by default
	.cui-button-button.cui-button-button,
	.cui-button-select.cui-button-select {
		@include button-color(transparent, $btn-inverted-color, transparent, $btn-inverted-hover-color, transparent, $btn-inverted-color);
	}
	
	.cui-label,
	.cui-number-input {
		color: $btn-inverted-color;
	}

	@if $border == 1 {
		--border-color: #{$btn-inverted-border-color};
	}
}

@mixin buttonbar-group-inverted($border: 0) {
	// add background to buttonbar-group !
	background-color: $btn-inverted-background;
	border-radius: $btn-border-radius;

	// must override @include button-bordered() in the buttonbar-horizontal() mixin that is applied by default
	.cui-button-button.cui-button-button,
	.cui-button-select.cui-button-select {
		@include button-color(transparent, $btn-inverted-color, transparent, $btn-inverted-hover-color, transparent, $btn-inverted-color);

		@if $border == 1 {
			.cui-button-visual {
				border-color: $btn-inverted-border-color;
			}
		}
	}
}

// Helper
@mixin ungroup-visually() {
	.cui-button {
		@include button-plain();
	}
}

@mixin ungroup-visually-inverted() {
	.cui-button {
		@include button-plain-inverted();
	}
}
