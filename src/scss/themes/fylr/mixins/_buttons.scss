@use "../variables" as v;
@use "disabled";
@use "text-truncate";

// * Buttons

/*
	- if not bordered or as link, make sure the left/right padding is correct (probably need to remove it)
	- unbordered buttons could be within item-list / menus --> hover style will apply background color, make sure there is padding

	- Button types:
		- default: bordered, on hover change background
		- primary: no border, orange fill, on hover change background
		- secondary: no border, grey fill, on hover change background
		- link: no border, underline, no outside padding, on hover change color
		- simple: no border, no outside padding, on hover change color
	- Button sizes:
		- xs
		- sm
		- md
		- lg
	- Special Plain Buttons:
		- icon
		- ellipsis
		- close / close-inverted
		- info
		- play
	- Button modifier
		- inverted (default, link ?, simple ?)
*/

// Button sizes
@mixin button-size($height, $padding-x, $font-size, $border-radius) {
	height: $height;
	min-width: v.$btn-visually-square-factor * $height; // make icon-only buttons optically square
	font-size: $font-size;
	line-height: $height; // force the button text to align center, especially the small button needs a seemingly larger lh
	border-radius: $border-radius;

	.cui-button-left {
		padding-left: $padding-x;
		margin-right: -0.5 * $padding-x;

		// reset, do not use :not, so we can easily override these styles if needed
		&:empty,
		&:only-child {
			padding-left: 0;
			margin-right: 0;
		}
	}

	.cui-button-right {
		padding-right: $padding-x;
		margin-left: -0.5 * $padding-x;

		// reset, do not use :not, so we can easily override these styles if needed
		&:empty,
		&:only-child {
			padding-right: 0;
			margin-left: 0;
		}
	}

	.cui-button-center {
		@include text-truncate.text-truncate();

		padding: 0 $padding-x;

		// there are some button that have an empty center element, adjust accordingly
		&:empty {
			margin-left: -0.5 * $padding-x;
			// display: none; // ! don't hide this, things will blow up
		}
	}
}

@mixin button-xs() {
	.cui-button-visual {
		@include button-size(16px, 0.25em, 12px, v.$btn-border-radius-sm);
	}
}

@mixin button-sm() {
	.cui-button-visual {
		@include button-size(v.$btn-height-sm, v.$btn-padding-x-sm, v.$btn-font-size-sm, v.$btn-border-radius-sm);
	}
}

@mixin button-md() {
	.cui-button-visual {
		@include button-size(v.$btn-height, v.$btn-padding-x, v.$btn-font-size, v.$btn-border-radius);
	}
}

@mixin button-lg() {
	.cui-button-visual {
		@include button-size(v.$btn-height-lg, v.$btn-padding-x-lg, v.$btn-font-size-lg, v.$btn-border-radius-lg);
	}
}

// * Special sizes for plain buttons

// Icon button: used for plain icon buttons like trash/delete, move handle, close, start presentation
@mixin button-plain-icon() {
	@include button-plain();

	.cui-button-visual {
		@include button-size(v.$btn-height-xs, 0, v.$font-size-sm, v.$btn-border-radius-sm);
	}
}

// Ellipsis / 3-dot-menu button
@mixin button-plain-ellipsis() {
	@include button-plain();

	.cui-button-visual {
		@include button-size(18px, 0, 18px, v.$btn-border-radius-sm); // fake baseline alignment via line-height/height 

		min-width: 0;
		width: 8px;
	}
}

// Info button
@mixin button-plain-info() {
	@include button-plain();
	@include button-sm();

	.cui-button-visual {
		height: 1.3em;
		min-width: 1.3em;

		.cui-button-left {
			padding: 0;
	
			.svg-info-circle {
				width: clamp(10px, 1em, 14px);
				height: clamp(10px, 1em, 14px);
			}
		}
	}

	// reset default active styles
	&.cui-layer-open {
		.cui-button-visual {
			color: inherit;
			background-color: transparent;
		}
	}

	.ez5-path + & {
		.cui-button-visual {
			margin-left: -0.5 * v.$spacer-xs;
		}
	}
}

// Close button
@mixin button-plain-close() {
	@include button-plain();
	@include button-xs();

	.cui-button-visual {
		.cui-button-left {
			.svg-close {
				width: 9px;
				height: 9px;
			}
		}
	}
}

// Close button inverted
@mixin button-plain-close-inverted() {
	@include button-plain-close();
	@include button-color(transparent, v.$white, transparent, v.$white, transparent, v.$white);

	opacity: 0.65;

	&:not(.cui-disabled) {
		&:hover,
		&:focus {
			opacity: 1;
		}
	}
}


// * Button colors

@mixin button-color($background, $color, $background-hover, $color-hover, $background-active, $color-active) {
	.cui-button-visual {
		background-color: var(--btn-background, #{$background});
		color: var(--btn-color, #{$color});
		border: var(--btn-border-width, #{v.$btn-border-width}) solid var(--btn-border-color, #{v.$btn-border-color});
	}

	&:not(.cui-disabled) {
		&:hover,
		&:focus {
			.cui-button-visual {
				color: var(--btn-color-hover, #{$color-hover});
				background-color: var(--btn-background-hover, #{$background-hover});
			}
		}
	
		&:focus {
			outline: none;
	
			.cui-button-visual {
				@include button-focus();
			}
		}
	
		&:active {
			.cui-button-visual {
				color: var(--btn-color-hover, #{$color-hover});
				background-color: var(--btn-background-hover, #{$background-hover});
				box-shadow: inset 0 0 0 20px rgba(#000, 0.08); // darken the background
			}
		}
	}


	&.cui-active,
	&.cui-layer-open {
		.cui-button-visual {
			color: var(--btn-color-active, #{$color-active});
			background-color: var(--btn-background-active, #{$background-active});
		}

		&:not(.cui-disabled) {
			&:hover,
			&:focus {
				.cui-button-visual {
					color: var(--btn-color-active, #{$color-active});
					background-color: var(--btn-background-active, #{$background-active});
				}
			}
		}
	}

	// special case when two adjoining buttons within a button group can be active, e.g. ez5-result-manager-button-options
	&.cui-active + .cui-active.cui-layer-open {
		.cui-button-visual {
			border-left-color: currentcolor;
		}
	}
}

// Reset button colors and border to a clean slate, use if: 
//	-- you need to style the button quite differently
//  -- you don't want to convert the button into a plain button using button-plain(), in most cases you probably want to do button-plain() instead

@mixin button-color-reset($background: transparent, $color: v.$body-color) {
	@include button-color($background, $color, $background, $color, $background, $color);
	@include button-no-border();
}

@mixin button-primary() {
	// default
	--btn-background: var(--brand-color);
	--btn-color: var(--brand-foreground-text-color);
	// hover
	--btn-background-hover: var(--brand-color-hover); // darker or lighter by 10%
	--btn-color-hover: var(--brand-foreground-text-color);
	// active
	--btn-background-active: var(--brand-color-hover);
	--btn-color-active: var(--brand-foreground-text-color);

	$background: v.$btn-primary-background;
	$color: v.$btn-primary-color;

	$background-hover: v.$btn-primary-hover-background;
	$color-hover: v.$btn-primary-hover-color;

	$background-active: v.$btn-primary-active-background;
	$color-active: v.$btn-primary-active-background;

	@include button-color($background, $color, $background-hover, $color-hover, $background-active, $color-active);
	@include button-no-border();
}

@mixin button-secondary() {
	$background: v.$btn-secondary-background;
	$color: v.$btn-secondary-color;

	$background-hover: v.$btn-secondary-hover-background;
	$color-hover: v.$btn-secondary-hover-color;

	$background-active: v.$btn-secondary-active-background;
	$color-active: v.$btn-secondary-active-color;

	@include button-color($background, $color, $background-hover, $color-hover, $background-active, $color-active);
	@include button-no-border();
}

@mixin button-danger() {
	$background: v.$btn-danger-background;
	$color: v.$btn-danger-color;

	$background-hover: v.$btn-danger-hover-background;
	$color-hover: v.$btn-danger-hover-color;

	$background-active: v.$btn-danger-active-background;
	$color-active: v.$btn-danger-active-color;

	@include button-color($background, $color, $background-hover, $color-hover, $background-active, $color-active);
	@include button-no-border();
}

@mixin button-color-inverted() {
	$background: v.$btn-inverted-background;
	$color: v.$btn-inverted-color;

	$background-hover: v.$btn-inverted-hover-background;
	$color-hover: v.$btn-inverted-hover-color;

	$background-active: $background-hover;
	$color-active: $color;

	@include button-color($background, $color, $background-hover, $color-hover, $background-active, $color-active);
	
	// invert border color
	// if a button has no-border, the border width will be 0, so applying a color here does not matter
	--btn-border-color: #{v.$btn-inverted-border-color};

	&:not(.cui-disabled) {
		&:hover {
			--btn-border-color: #{v.$btn-inverted-hover-border-color};
		}
	}
}

@mixin button-link() {
	@include button-color(transparent, v.$link-color, transparent, v.$link-color, transparent, v.$link-color);
	@include button-no-border();

	.cui-button-visual {
		height: auto;
		line-height: v.$line-height-base;
		align-items: baseline;
		min-width: 0;
		
		.cui-button-center {
			text-decoration: underline;
			word-break: break-all;
			white-space: normal;
		}

		.cui-button-center:first-child,
		.cui-button-left:empty + .cui-button-center {
			padding-left: 0;
		}

		.cui-button-center:last-child,
		.cui-button-center:only-child {
			padding-right: 0;
		}

		// very special case, where clients build custom buttons with only a right icon (better would be to use the left spot for the icon)
		// see uni-heidelberg (.ez5-custom-data-type-ubhdgnd)
		.cui-button-left:empty + .cui-button-center:empty {
			margin: 0;
			padding: 0;
		}

		.cui-button-left:empty + .cui-button-center:empty + .cui-button-right {
			padding-right: 0;
			margin-left: 0;
		}
		// end: special case
	}

	&:not(.cui-disabled) {
		&:hover,
		&:focus {
			.cui-button-visual .cui-button-center {
				text-decoration: none;
			}
		}
	}
}

@mixin button-link-sm() {
	@include button-link();
	
	.cui-button-visual {
		font-size: v.$btn-font-size-sm;
		line-height: v.$line-height-sm;
	}
}

@mixin button-convert-link-into-default() {
	@include button-md();
	@include button-border();
	@include button-color(transparent, v.$btn-color, v.$btn-bordered-hover-background, v.$btn-bordered-hover-color, v.$btn-bordered-active-background, v.$btn-bordered-active-color);

	.cui-button-visual {
		align-items: center;
		
		.cui-button-center {
			text-decoration: none;
			word-break: initial;
		}
	}
}

// Mixin to remove the button border only
// ! use carefully, in most cases you want to use button-plain() instead, which will set button colors and hover/focus states as well
@mixin button-no-border() {
	--btn-border-color: transparent;
	--btn-border-width: 0;

	&:not(.cui-disabled) {
		&:hover,
		&:focus {
			--btn-border-color: transparent;
		}
	}
}

// Explicitely add back button border, only needed if it was removed before (e.g. via the button-link())
@mixin button-border() {
	--btn-border-color: currentcolor;
	--btn-border-width: #{v.$btn-border-width};

	&:not(.cui-disabled) {
		&:hover,
		&:focus {
			--btn-border-color: currentcolor;
		}
	}
}

@mixin button-plain() {
	@include button-no-border();
	@include button-color(v.$btn-background, v.$btn-color, v.$btn-hover-background, v.$btn-hover-color, v.$btn-active-background, v.$btn-active-color);

	&:not(.cui-disabled) {
		&:active {
			.cui-button-visual {
				text-shadow: 0 0 0 rgba(#000, 0.4); // darken the text color
				box-shadow: none; // reset from button-color()
			}
		}
	}
}

@mixin button-plain-inverted() {
	@include button-color-inverted();
	@include button-no-border(); // ! order
}

@mixin button-focus() {
	outline: none;
	border-color: v.$btn-bordered-focus-border-color;
	box-shadow: v.$btn-focus-shadow !important;
}

// * Select button as "input field dropwdown", use in forms, ez5-fields

// must look like a regular input field with a white background
@mixin button-select-as-input() {
	--btn-background: #{v.$input-background};
	--btn-border-color: transparent;
	// hover
	--btn-color-hover: #{v.$btn-hover-color};
	--btn-background-hover: #{v.$input-background};
	
	.cui-button-visual {
		.cui-button-center {
			// in sync with input field padding
			padding-left: v.$input-padding-x;
			padding-right: v.$input-padding-x;
		}

		.cui-button-right {
			// reduce right padding to be more like left
			padding-right: 0.6rem;
		}
	}
}

// * Combobox button
@mixin button-combobox($button-position: 'right') {
	// applied to .cui-button-button
	@include button-plain();

	height: 100%;
	
	.cui-button-visual {
		display: flex;
		height: 100%;
		align-items: flex-start; // in case we have a textarea input or any other longer left input, the icon should always be top aligned
		background-color: v.$combobox-input-background;
		border: 1px solid v.$combobox-border-color;

		@if $button-position == 'right' {
			border-left: var(--combobox-divider-border, #{v.$combobox-divider-border});
			border-top-left-radius: 0;
			border-bottom-left-radius: 0;
		} @else if $button-position == 'left' {
			z-index: 1;
			position: relative;
			border-right: var(--combobox-divider-border, #{v.$combobox-divider-border});
			border-top-right-radius: 0;
			border-bottom-right-radius: 0;
		}

		// usually contains the icon
		.cui-button-left {
			@include button-combobox-center-icon();
		}
	}

	&:not(.cui-disabled) {
		&.cui-layer-open,
		&.cui-layer-open:hover,
		&.cui-active,
		&.cui-active:hover {
			.cui-button-visual {
				background-color: v.$btn-active-background;
				color: v.$btn-active-color;

				@if $button-position == 'right' {
					border-left-color: v.$btn-active-background !important;
				} @else if $button-position == 'left' {
					border-right-color: v.$btn-active-background !important;
				}
			}
		}

		// todo: hover
		&:hover {
			.cui-button-visual {
				background-color: v.$input-background;
			}
		}
		
		&:focus {
			z-index: 1;
		
			.cui-button-visual {
				border-radius: v.$input-border-radius !important;
				border-color: v.$input-focus-border-color !important;
				box-shadow: v.$btn-focus-shadow !important;
			}
		}
	}
}

// we need to set an explicit icon container height and vertically center the icon within, 
// because the parent .cui-button-visual needs to have flex align-items: flex-start
// this way the icon will always be centered optically within its container
@mixin button-combobox-center-icon() {
	min-height: v.$btn-height - 2px;
	display: flex;
	align-items: center;

	.fa-angle-down {
		line-height: 1;

		&::before {
			top: 0;
		}
	}
}


@mixin button-play() {
	@include button-color-inverted();

	.cui-button-visual {
		height: var(--btn-height-play, #{v.$btn-height-play});
		width: var(--btn-height-play, #{v.$btn-height-play});
		min-width: var(--btn-height-play, #{v.$btn-height-play});
		border-radius: 50%;
	}

	.fa {
		font-size: v.$icon-font-size-lg;
		text-shadow: 0 1px 7px rgb(0 0 0 / 20%);
		margin-left: 3px;
	}
}

@mixin button-disabled() {
	--pointer-events-when-disabled: auto;

	@include disabled.disabled();
}
