@use "../variables" as v;
@use "breakpoints";

@mixin form-hint() {
	@include form-hint-before();

	// if row has no key, move hint AFTER value
	.cui-form-tr--has-no-key > .cui-form-value > & {
		@include form-hint-after();
	}
}

// * default = before the input (and after the key)
// hint will be rendered in the DOM before the input/value by default
@mixin form-hint-before() {
	order: 0;
	margin-top: 0;
	margin-bottom: v.$form-hint-margin-bottom;

	// if hint is rendered before a checkbox we reset margin and indent to 0
	&:has(+ .cui-checkbox) {
		margin-bottom: 0;
		margin-left: 0; // reset $checkbox-form-hint-indent
	}
}

// * alternative = after the input
// hint is moved after the input in these scenarios: 
// - a form field does not have a key
// - the key-value pairs are rendered "inline" via form-key-value-inline(), for example in the base config on large screens
@mixin form-hint-after() {
	order: 1;
	margin-top: v.$form-hint-margin-bottom;
	margin-bottom: 0;

	// if hint is rendered after a checkbox we reset margin to 0 and indent the hint
	&:has(+ .cui-checkbox) {
		margin-top: 0;
		// indentation is 0 atm because it only really makes sense visually within a group of checkboxes that all have a hint, e.g. objecttype > PDFCreator
		margin-left: v.$checkbox-form-hint-indent;
	}
}

@mixin input-sm() {
	height: v.$input-height-sm;
	line-height: v.$input-height-sm;
}

@mixin input-focus() {
	// should always win !
	box-shadow: v.$input-focus-shadow !important; // see mixins/_buttons
	border-color: v.$input-focus-border-color !important;
	z-index: 1;
}

@mixin form-key-value-inline() {
	@include breakpoints.media-breakpoint-up(md) {
		.cui-form-tr,
		.cui-form-tr-header {
			display: flex;
		}

		.cui-form-key {
			flex: 0 0 auto;
			width: var(--form-key-width, #{v.$form-key-width});
			min-width: var(--form-key-width, #{v.$form-key-width});
			max-width: none;
			padding-right: v.$form-cell-gap;
		
			> label,
			> .cui-label {
				padding-top: var(--form-key-padding-top, #{v.$form-key-padding-top});
				padding-bottom: 0;
			}
		}

		.cui-form-value {
			flex: 1 1 auto;
			min-width: 0;
		
			> .cui-input > input {
				min-width: 0;
			}
		
			> label,
			> .cui-label,
			> .cui-output > .cui-data-field-output-label {
				padding-top: var(--form-key-padding-top, #{v.$form-key-padding-top});
				padding-bottom: 0;
			}

			// in case there is a list-view included in the form-value we need to reset the padding-top
			// list view will take care of spacing on its own
			.cui-list-view {
				--form-key-padding-top: 0;
			}
		}

		.cui-form-tr--has-key > .cui-form-value > .cui-form-hint {
			@include form-hint-after();
		}
	}
}

@mixin form-key-value-stacked() {
	.cui-form-tr,
	.cui-form-tr-header {
		display: block;
	}

	.cui-form-key {
		width: auto;
		min-width: 0;
		padding-right: 0;
	
		> label,
		> .cui-label {
			padding-top: 0;
			padding-bottom: v.$form-key-padding-bottom;
		}
	}

	.cui-form-value {
		> label,
		> .cui-label,
		> .cui-output > .cui-data-field-output-label {
			&:not(.cui-file-upload-drop-zone) {
				padding-top: 0;
				padding-bottom: v.$form-key-padding-bottom;
			}
		}
	}

	.cui-form-tr--has-key > .cui-form-value > .cui-form-hint {
		@include form-hint-before();
	}
}

@mixin form-as-grid() {
	.cui-data-field {
		max-width: 100%;
	}

	> div > .cui-form-table {
		.cui-form-td {
			display: block;
			padding: 0 0 v.$spacer-xs;
		}

		.cui-form-key {
			max-width: none;
			width: auto;
			min-width: 0;
		}

		.cui-form-value {
			width: auto;
		}

		@include breakpoints.media-breakpoint-up(sm) {
			display: flex;
			flex-wrap: wrap;
			margin: 0 #{-(v.$form-cell-gap)};
			width: auto; // negative margins!

			.cui-form-tr {
				display: block;
				padding: 0 v.$form-cell-gap;
				width: 100%;
				margin-bottom: v.$form-cell-gap;

				$sizes: '1/2', '1/3', '2/3', '1/4', '2/4', '3/4', '1/5', '2/5', '3/5', '4/5';

				@each $size in $sizes {
					&[data-cui-grid='#{$size}'] {
						width: calc(#{$size} * 100%);
					}
				}
			}
		}
	}
}

@mixin data-form-field-group-indicator() {
	position: relative;
	padding: 0 0 0 var(--data-form-field-group-border-spacing, 0.75rem);
	
	&::before {
		content: '';
		position: absolute;
		top: var(--data-form-field-group-indicator-top, 0);
		left: 0;
		bottom: var(--data-form-field-group-indicator-bottom, 0);
		width: v.$data-form-field-group-border-width;
		background-color: var(--data-form-field-group-border-color, #{v.$data-form-field-group-border-color});
	}
}
