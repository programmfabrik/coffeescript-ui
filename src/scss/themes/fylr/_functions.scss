@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:math";
// Functions
//
// Utility mixins and functions for evaluating source code across our variables, maps, and mixins.

// Ascending
// Used to evaluate Sass maps like our grid breakpoints.
// stylelint-disable at-rule-empty-line-before
@mixin assert-ascending($map, $map-name) {
	$prev-key: null;
	$prev-num: null;

	@each $key, $num in $map {
		@if not $prev-num or math.unit($num) == '%' {
			// Do nothing
		} @else if not math.compatible($prev-num, $num) {
			@warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
		} @else if $prev-num >= $num {
			@warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
		}
		$prev-key: $key;
		$prev-num: $num;
	}
}

// Starts at zero
// Used to ensure the min-width of the lowest breakpoint starts at 0.
@mixin assert-starts-at-zero($map, $map-name: '$grid-breakpoints') {
	$values: map.values($map);
	$first-value: list.nth($values, 1);

	@if $first-value != 0 {
		@warn 'First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.';
	}
}

// Pixel to rem conversion
@function calculate-rem($size) {
	@return calc($size / 16px) * 1rem;
}

@function calculate-px($size) {
	@return calc($size / 1rem) * 16px;
}

// stylelint-enable at-rule-empty-line-before
