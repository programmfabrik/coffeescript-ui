// Functions
//
// Utility mixins and functions for evaluating source code across our variables, maps, and mixins.

// Ascending
// Used to evaluate Sass maps like our grid breakpoints.
// stylelint-disable at-rule-empty-line-before
@mixin _assert-ascending($map, $map-name) {
	$prev-key: null;
	$prev-num: null;

	@each $key, $num in $map {
		@if $prev-num == null or unit($num) == '%' {
			// Do nothing
		}

		@else if not comparable($prev-num, $num) {
			@warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
		}

		@else if $prev-num >= $num {
			@warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
		}
		$prev-key: $key;
		$prev-num: $num;
	}
}

// Starts at zero
// Used to ensure the min-width of the lowest breakpoint starts at 0.
@mixin _assert-starts-at-zero($map, $map-name: '$grid-breakpoints') {
	$values: map-values($map);
	$first-value: nth($values, 1);

	@if $first-value != 0 {
		@warn 'First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.';
	}
}

// Color contrast
@function color-yiq($color, $dark: $yiq-text-dark, $light: $yiq-text-light) {
	$r: red($color);
	$g: green($color);
	$b: blue($color);

	$yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

	@if ($yiq >= $yiq-contrasted-threshold) {
		@return $dark;
	}

	@else {
		@return $light;
	}
}

// Retrieve color Sass maps
@function color($key: 'blue') {
	@return map-get($colors, $key);
}

@function theme-color($key: 'primary') {
	@return map-get($theme-colors, $key);
}

@function gray($key: '100') {
	@return map-get($grays, $key);
}

// Pixel to rem conversion
@function calculate-rem($size) {
	@return $size / 16px * 1rem;
}

// Retrieve headline font-size
@function headline-size($key: 'h1') {
	@return map-get($headline-sizes, $key);
}


// stylelint-enable at-rule-empty-line-before
