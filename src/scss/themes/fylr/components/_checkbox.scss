@use "../mixins/forms";
@use "../variables" as v;

// Checkbox
.cui-checkbox {
	min-width: 0;
	max-width: none;
	display: inline-block;

	.cui-checkbox--icon {
		.cui-button-checkbox {
			.cui-button-left i {
				// just a tiny bit bigger so the icon is not too cramped
				width: v.$checkbox-size * 1.15;
				height: v.$checkbox-size * 1.1;
			}
		}
	}

	.cui-checkbox--multiline {
		.cui-button-visual {
			align-items: baseline;
			white-space: initial;

			.cui-button-center {
				span {
					max-width: 100%;
					white-space: normal;
					word-wrap: break-word;
					text-overflow: clip;
				}
			}
		}
	}
}

// --checkbox-border-color
// --checkbox-background
// --checkbox-active-background
// --checkbox-active-color

.cui-button-checkbox {
	display: inline-flex; // so that the click area is not wider than the text
	max-width: 100%;
	// todo: should we really set a min-height by default?
	// pro: checkboxes will be visually more in sync with regular inputs, escpecially when they are next to each other
	// contra: in some cases they will use more space than needed, e.g. within cui-data-field, see Admin > Base Config > Connector > > Connector > EasyDB Instanzen fÃ¼r Connector > Checkbox "Aktivieren"
	min-height: v.$input-height;
	line-height: v.$input-height;
	cursor: pointer;

	[data-max-chars] {
		text-align: inherit;
	}

	> .cui-button-visual {
		align-items: baseline;
		justify-content: flex-start;
		
		> .cui-button-left {
			min-width: v.$checkbox-size;
			margin-right: v.$checkbox-margin;
			
			// empty checkbox: span
			// filled checkbox: i
			span,
			i {
				position: relative;
				top: -1px;
				display: inline-flex;
				justify-content: center;
				align-items: center;
				width: v.$checkbox-size;
				height: v.$checkbox-size;
				border: 1px solid var(--checkbox-border-color, #{v.$checkbox-border-color});
				background: var(--checkbox-background, #{v.$checkbox-background});
				font-size: v.$checkbox-icon-size;
				line-height: v.$checkbox-icon-size + 2px;
				border-radius: v.$checkbox-border-radius;
				vertical-align: middle; // keep <i> and <span> in sync
	
				// invert if checkbox is within a cui-active or cui-layer-open button (see search type selector)
				.cui-active &,
				.cui-layer-open & {
					border-color: v.$light;
				}
			}
		}

		> .cui-button-center {
			display: flex; // the child span[data-max-chars] will set explicit width
			min-width: 0;
			flex: 1 1 auto;
			padding-right: v.$spacer-sm;
			line-height: v.$line-height-sm;
	
			&:empty {
				display: none;
			}
		}
	}

	&[role='radio'] {
		> .cui-button-visual > .cui-button-left {
			span,
			i {
				border-radius: 100%;
			}
		}
	}

	&.cui-active {
		// checkbox
		> .cui-button-visual > .cui-button-left i {
			background: var(--checkbox-active-background, #{v.$checkbox-active-background});
			color: var(--checkbox-active-color, #{v.$checkbox-active-color});
			border-color: var(--checkbox-active-background, #{v.$checkbox-active-background});

			// invert if checkbox is within a cui-active or cui-layer-open button (see search type selector)
			.cui-active &,
			.cui-layer-open & {
				color: v.$light;
			}
		}

		// radio
		&[role='radio'] {
			> .cui-button-visual > .cui-button-left i {
				background: var(--checkbox-active-background, #{v.$checkbox-active-background});
				color: transparent;
				border-color: var(--checkbox-active-background, #{v.$checkbox-active-background});

				&::after { // radio dot
					content: '';
					position: absolute;
					left: 50%;
					top: 50%;
					width: 6px;
					height: 6px;
					margin: -3px 0 0 -3px;
					border-radius: 100%;
					background: var(--checkbox-active-color, #{v.$checkbox-active-color});
				}
			}
		}
	}

	&:focus {
		outline: none;

		> .cui-button-visual > .cui-button-left span,
		> .cui-button-visual > .cui-button-left i {
			@include forms.input-focus();
		}

		&.cui-active {
			> .cui-button-visual > .cui-button-left span,
			> .cui-button-visual > .cui-button-left i {
				background-color: v.$focused; // make more prominent
			}
		}
	}

	&.cui-indeterminate {
		> .cui-button-visual > .cui-button-left span {
			// background-color: gray('200'); // looks weird on white background

			// invert if checkbox is within a cui-active or cui-layer-open button (see search type selector)
			.cui-active &,
			.cui-layer-open & {
				// background-color: transparent;
				border-color: v.$light;
			}

			&::after {
				content: '';
				position: absolute;
				left: 2px;
				width: calc(100% - 4px);
				top: 50%;
				margin-top: -1px;
				height: 2px;
				background: currentcolor;
			}
		}
	}
}
