// * List View & List View Grid

.cui-list-view {
	// border
	--list-view-border-color: #{$table-border-color};
	--list-view-border-width: 0;
	--list-view-background: transparent;
	--list-view-column-border-width: 1px; // ! header columns and inner column MUST be the same width to allow correct column width calculation
	--list-view-row-border-width: 1px;
	// header rows & columns
	--list-view-header-background: transparent; // #{$table-border-color};
	--list-view-header-color: #{$body-color};
	--list-view-header-row-border-color: #{$table-border-color};
	--list-view-header-row-border-width: var(--list-view-row-border-width);
	--list-view-header-column-border-color: #{$table-border-color};
	--list-view-header-column-border-width: var(--list-view-column-border-width); // !
	// inner rows & columns
	--list-view-inner-border-color: #{$table-border-color};
	--list-view-inner-row-border-width: var(--list-view-row-border-width);
	--list-view-inner-row-border-color: var(--list-view-inner-border-color);
	--list-view-inner-row-min-height: #{$list-view-data-height};
	--list-view-inner-column-border-color: transparent; // ! "hide" column border by default by making them transparent, do not set border-width to 0
	--list-view-inner-column-border-width: var(--list-view-column-border-width); // !
	// selected
	--list-view-selected-row-border-width: 0;
	--list-view-selected-row-border-color: transparent;
	--list-view-selected-row-background: #{$list-view-selected-row-background};
	// hover
	--list-view-hover-row-background: #{$list-view-hover-row-background};
	// invalid
	--list-view-invalid-row-background: #{$danger-bg-light};


	min-height: 0;
	flex-direction: column;
	// todo: what background color ? cui-pane has 'light' background by default, ListView extends Pane class
	background-color: transparent; // reset from cui-pane
	font-size: $list-view-font-size; // todo
	line-height: $line-height-sm;
	border: var(--list-view-border-width) solid var(--list-view-border-color);

	// todo: add zebra option?

	> .cui-vertical-layout-center {
		flex-shrink: 1;
		display: flex;
		flex-direction: column;
		background-color: var(--list-view-background); // only apply colored background to the center (bottom might contain buttons etc.)

		@include pane-padding-reset(); // we reset padding, because in most cases the padding will be applied by some outer parent (like cui-pane)
	}

	// nested
	.cui-list-view {
		background-color: transparent; // reset
		// margin: $spacer 0; // no margin to keep in line with e.g. input fields
	}

	> .cui-vertical-layout-top > .cui-toolbar,
	> .cui-vertical-layout-bottom > .cui-toolbar {
		padding-left: 0;
		padding-right: 0;
		background-color: transparent;
	}

	// * Special Buttons within list-view

	// Link Button
	.cui-button-href {
		height: $btn-height; // keep alignment in the row
	}

	&.use-css-grid-layout {
		@include list-view-use-css-grid-layout();
	}
}

// * Body

// outside .cui-list-liew, we can use this in Form too
// <div class="cui-list-view-grid-quadrant cui-lv-tbody">

.cui-lv-tbody {
	display: flex;
	flex-direction: column;
	max-width: 100%;
	min-width: 0;
	// flex-shrink: 1; CONFLICT: overwrites shrink: 0 of quadrant-0 and 2
}

// * Columns

.cui-lv-td {
	display: block;
	width: $list-view-data-width;
	min-height: var(--list-view-inner-row-min-height);

	&:not(.cui-lv-row-move-handle-column):not(.cui-lv-td-rotate-90) {
		min-width: 40px; // make sure the shortest icon-only buttons in the default size are visible in the column
	}
	
	overflow: hidden;
	flex-shrink: 0;
	// flex: 1 0 auto; // won't work when resizing the columns
	box-sizing: content-box;
	padding: $list-view-padding-y $list-view-padding-x;

	&:not(:last-child) {
		border-right: var(--list-view-inner-column-border-width) solid var(--list-view-inner-column-border-color);
	}

	.cui-lv-td {
		max-width: 100%;
		box-sizing: border-box; // ???
	}

	// see datamodel > definition
	&.cui-lv-td-rotate-90 {
		width: 18px;
		min-width: 18px;

		.cui-tree-node-spacer {
			display: none;
		}

		> .cui-label-rotate-90 {
			word-wrap: break-word;
			margin-left: 0;
			max-width: none !important;
		}

		.cui-data-field {
			flex-grow: 0;
		}
	}

	&.cui-lv-td-fill {
		min-height: 0;
	}

	&.cui-lv-td-max {
		flex-grow: 1;
	}

	.cui-data-field-input {
		flex-grow: 1;
	}

	.cui-button {
		max-width: 100%; // allow button text-overflow ellipsis
	}

	// first column can contain a validation icon
	&:has(.cui-label-validation) {
		display: flex;
		flex-direction: column;
		align-items: center;

		> * {
			flex: 0 0 auto;
		}

		.cui-label-validation {
			margin-top: auto;
			min-height: 0;
			padding: 0;
		}
	}
}

.cui-lv-th,
.list-view-header-row .cui-lv-td {
	cursor: default;
	line-height: $btn-height-sm; // make the header rows the same height as a toolbar with small buttons

	// whenever we have rotated column labels, we can allow regular labels to overflow onto the next line
	// no need to truncate them, because of the rotated-90 labels we have enough space vertically
	&:has(~ .cui-lv-td-rotate-90) {
		.cui-label:not(.cui-label-rotate-90) {
			.cui-label-content {
				white-space: normal;
				line-height: 1.2;
			}
		}
	}
}

// * Rows

// <div class="cui-lv-tr-outer list-view-row">
// 	<div class="cui-lv-tr">...</div>
// </div>

.cui-lv-tr-outer {
	display: flex;
	flex: 0 0 auto;
	min-width: 0;
	outline: none;
	cursor: default;

	// be careful to apply a default select state, it's probably best to do this contextually in the theme
	&.cui-selected,
	&.cui-selected:hover,
	&.cui-selected:focus {
		> .cui-lv-tr {
			box-shadow: inset 0 0 0 var(--list-view-selected-row-border-width) var(--list-view-selected-row-border-color);
			background-color: var(--list-view-selected-row-background);
		}
	}

	&.cui-row-invalid,
	&.cui-row-invalid:hover,
	&.cui-row-invalid:focus {
		> .cui-lv-tr {
			background-color: var(--list-view-invalid-row-background);
		}
	}
}

// * Special Header Row

// <div class="cui-lv-tr-outer list-view-header-row">

.list-view-header-row {
	.cui-lv-tr {
		border-bottom: var(--list-view-header-row-border-width) solid var(--list-view-header-row-border-color);
	}
	
	.cui-lv-td {
		display: flex;
		align-items: flex-end;
		min-height: auto; // reset min-height, so labels appear centered, when they are in fact aligned "flex-end". Flex-end is needed in case the header contains rotate-90

		&:not(:last-child):not(:empty) {
			border-color: var(--list-view-header-column-border-color);
			border-width: var(--list-view-header-column-border-width);
		}

		&.cui-lv-td-rotate-90 {
			overflow: hidden;
		}
	}

	.cui-label {
		font-weight: $headings-font-weight;
	}
}

.cui-lv-tr {
	flex: 1 1 auto;
	display: flex;
}

// in quadrant 2 or 3 a row 'cui-lv-tr-fill-outer' could be added as last child
// Laut Martin: "das ist ein platzhalter div um rechts neben den spalte einen füller zu haben der die äußere div ausfüllt"
.cui-lv-tr-fill-outer {
	flex: 1 1 auto;
	display: flex;

	.cui-lv-td {
		// leave padding-left and padding-right
		// because its used to measure
		// the column width for headers
		padding-top: 0 !important;
		padding-bottom: 0 !important;
		min-height: 0 !important;
		max-height: 0 !important;
		height: 0 !important;
	}
}

// * List View Grid

// <div class="cui-list-view-grid">
// 	<div class="cui-list-view-grid-inner-top">
// 		<div class="cui-list-view-grid-quadrant cui-lv-tbody"></div>
// 	</div>
// 	<div class="cui-list-view-grid-inner-bottom">
// 		<div class="cui-list-view-grid-quadrant cui-lv-tbody"></div>
// 	</div>
// </div>

.cui-list-view-grid {
	flex: 1 1 auto;
	display: flex;
	flex-direction: column;
	position: relative;
	overflow: hidden;

	&.cui-lv--max-last-col {
		> div > .cui-list-view-grid-quadrant {
			> .cui-lv-tr-outer,
			> .cui-lv-tr-fill-outer {
				> .cui-lv-tr {
					> .cui-lv-td:last-child {
						flex-grow: 1;
					}
				}
			}
		}
	}

	&.cui-list-view-tree-no-hierarchy {
		.cui-tree-node-handle,
		.cui-tree-node-spacer {
			display: none !important;
		}
	}
}

// eg. header
.cui-list-view-grid-quadrant-0,
.cui-list-view-grid-quadrant-1 {
	overflow: hidden;

	// todo: find use-case
	.cui-button {
		height: 100%;
		flex: 1 1 auto;
		align-items: stretch;

		.cui-button-left {
			padding-right: $spacer-sm;
		}

		.cui-button-center {
			flex: 1 1 auto;
			justify-content: flex-start;
		}
	}

	.cui-label {
		font-weight: $headings-font-weight;

		&-multiline {
			flex-shrink: 1;
			max-width: 100%;
		}
	}

	.cui-lv-tr {
		border-bottom: var(--list-view-header-row-border-width) solid var(--list-view-header-row-border-color);
	}
	
	.cui-lv-td {
		position: relative;
		overflow: visible;

		&:not(:last-child):not(:empty) {
			border-color: var(--list-view-header-column-border-color);
			border-width: var(--list-view-header-column-border-width);
		}

		&.cui-lv-td-rotate-90 {
			overflow: hidden;
		}
	}
}

.cui-list-view-grid-quadrant-0 {
	flex: 0 0 auto;
}

.cui-list-view-grid-quadrant-1 {
	flex: 1 1 auto;

	.cui-lv-td:last-child::after {
		display: none;
	}
}

.cui-list-view-grid-inner-top {
	flex: 0 0 auto;
	display: flex;
	background-color: var(--list-view-header-background);
	color: var(--list-view-header-color);

	// breaks the headers - they should be left aligned
	// .cui-lv-td {
	// 	justify-content: flex-end;
	// }

	.is-scrolling-vertically & {
		box-shadow: $list-view-scrolling-box-shadow;
	}
}

.cui-list-view-grid-inner-bottom {
	flex: 1 1 auto; // IE 11 needs 0% basis - CONFLICT: apparently IE11 needs a auto basis
	display: flex;
	min-height: 0; // FF scroll fix
}

// content body
.cui-list-view-grid-quadrant-2 {
	flex: 0 0 auto;
	overflow: hidden;
}

.cui-list-view-grid-quadrant-3 {
	flex: 1 1 auto;
	overflow: auto;
	-webkit-overflow-scrolling: touch;

	// todo: do we need this, find use-case
	&:focus {
		outline: none;
	}
}

.cui-list-view-grid-quadrant-2,
.cui-list-view-grid-quadrant-3 {
	// can't select last-child because there is usually a .cui-lv-tr-fill-outer element as the last-child
	// the following might leave the list with a seemingly double border at the very bottom, this is due to the scrollbar having a fine border as well
	// since we cannot style "last-of-class", we have to style border-bottom (instead of border-top) to get a final border even if the list is very short and stops in the middle of a pane or screen
	// alternatively if we did style border-top, the last element would still be .cui-lv-tr-fill-outer which could have a 0 height, leaving again a seemingly double border at the bottom
	> .cui-lv-tr-outer {
		> .cui-lv-tr {
			border-bottom: var(--list-view-inner-row-border-width) solid var(--list-view-inner-row-border-color);
		}
	}
}

// * Modifier

.cui-list-view-row-selectable,
.cui-lv-tree-node--is-branch {
	@include clickable;

	&:hover,
	&:focus {
		> .cui-lv-tr {
			background-color: var(--list-view-hover-row-background);
		}
	}
}

// Special case, when there is a single column in the quadrant-2 that contains only the drag handle
// --
// With :has() selector we can select one column and change the background whenever the related column is hovered.
// Since we need to reference the related row by the row number, we need to generate a selector
// for as many rows
.cui-list-view-grid-fixed-col-has-only-row-move-handle {
	.cui-list-view-grid-inner-bottom {
		@for $row from 1 through 100 {
			// hover over a CONTENT column will adjust the related HANDLE column
			&:has(.cui-list-view-grid-quadrant-3 .cui-list-view-row-selectable[row='#{$row}']:hover) {
				.cui-list-view-grid-quadrant-2 .cui-list-view-row-selectable[row='#{$row}'] .cui-lv-tr {
					background-color: var(--list-view-hover-row-background);
				}
			}

			// hover over a HANDLE column will adjust related CONTENT column
			&:has(.cui-list-view-grid-quadrant-2 .cui-list-view-row-selectable[row='#{$row}']:hover) {
				.cui-list-view-grid-quadrant-3 .cui-list-view-row-selectable[row='#{$row}'] .cui-lv-tr {
					background-color: var(--list-view-hover-row-background);
				}
			}
		}
	}
}

// Move a row via drag & drop
.cui-lv-row-move-target {
	height: 4px;
	background: $list-view-move-target-area-background;
	margin-top: -2px;
	position: absolute;
	z-index: 4;
	pointer-events: none !important;
}

.cui-lv-row-move {
	position: absolute;
	z-index: 4;
	background: $list-view-move-target-area-background;
	opacity: 0.2;
}

.cui-lv-row-move-handle-column {
	cursor: default; // reset .cui-drag-drop-select-draggable

	&::after {
		display: none;
	}

	&.cui-lv-td {
		width: $list-view-move-handle-width;
		padding-left: 0.5*$table-padding-x;
		padding-right: 0;
		border: 0 !important; // ! column width calculation will be off otherwise
	}

	.cui-drag-handle-row {
		display: none;
	}

	.cui-list-view-row-movable & {		
		.cui-drag-handle-row {
			display: block;
			margin: 0;
			margin-top: 0.45em;
			cursor: -webkit-grab;
			cursor: grab;
		}
	}
}

// Resize column in the header
.cui-lv-col-resize-handle {
	position: absolute;
	cursor: ew-resize;
	right: 0;
	top: 0;
	bottom: 0;
	margin: 0 -5px;
	width: 9px;
	z-index: 1;
	
	// deactivate user resize action
	.cui-not-user-resizable & {
		pointer-events: none;
	}
}


// Resize column ??
// todo: find use-case
.cui-lv-col-resize {
	cursor: ew-resize !important;
	// bigger grab area
	margin: 0 -4px;
	padding: 0 4px;

	> div {
		width: 1px;
		margin-left: -1px;
		height: 100%;
		background: $table-border-color;
	}
}

.cui-lv-draggable {
	position: absolute;
	opacity: 0.5;
}

// * List View with DataFields

// Position tree-node- and drag-handle lower
// because input fields or buttons make the rows higher
// and make the filler higher
.cui-lv--has-datafields {
	--list-view-inner-row-min-height: #{$btn-height}; // should always have a min-height so we can better align content within (like drag handles, buttons, labels)

	// its sick.. but the only known way to make sure that it doesn't affect nested elements
	> .cui-vertical-layout-center {
		> .cui-list-view-grid {
			> .cui-list-view-grid-inner-bottom > .cui-list-view-grid-quadrant,
			> .cui-list-view-grid-quadrant {
				> .cui-lv-tr-outer {
					> .cui-lv-tr {
						> .cui-lv-td {
							> .cui-label,
							> .cui-output {
								display: block; // reset to block to trigger correct aligment with padding
								min-height: var(--list-view-inner-row-min-height);
								padding-top: $spacer-xs;
								padding-bottom: $spacer-xs;
							}

							> .cui-output .cui-label {
								padding: 0;
							}

							> .cui-tree-node {
								> .cui-tree-node-handle:not(:empty) {
									min-height: var(--list-view-inner-row-min-height);
									margin-top: var(--list-view-tree-node-handle-offset, -2px);
								}

								> .cui-tree-node-content > .cui-label,
								> .cui-tree-node-content > .cui-output {
									display: block; // reset to block to trigger correct aligment with padding
									min-height: var(--list-view-inner-row-min-height);
									padding-top: $spacer-xs;
									padding-bottom: $spacer-xs;
								}
							}

							> .cui-drag-handle-row {
								margin-top: $spacer-sm; // needs to be aligned with text AND buttons within a row
							}

							&.cui-lv-row-move-handle-column {
								// padding-left: 0.75rem; // ! column width calculation will be off
							}
						}
					}
				}
			}
		}
	}
}
